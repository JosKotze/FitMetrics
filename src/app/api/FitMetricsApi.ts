//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class FitMetricsApi {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param accessToken (optional) 
     * @return OK
     */
    activitiesAll(accessToken: string | undefined): Promise<Activity[]> {
        let url_ = this.baseUrl + "/api/Activities?";
        if (accessToken === null)
            throw new Error("The parameter 'accessToken' cannot be null.");
        else if (accessToken !== undefined)
            url_ += "accessToken=" + encodeURIComponent("" + accessToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivitiesAll(_response);
        });
    }

    protected processActivitiesAll(response: Response): Promise<Activity[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Activity[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    activitiesPOST(body: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Activities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivitiesPOST(_response);
        });
    }

    protected processActivitiesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    activitiesGET(id: number): Promise<string> {
        let url_ = this.baseUrl + "/api/Activities/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivitiesGET(_response);
        });
    }

    protected processActivitiesGET(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    activitiesPUT(id: number, body: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Activities/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivitiesPUT(_response);
        });
    }

    protected processActivitiesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    activitiesDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Activities/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivitiesDELETE(_response);
        });
    }

    protected processActivitiesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    authCodeCallbackAll(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/AuthCodeCallback";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthCodeCallbackAll(_response);
        });
    }

    protected processAuthCodeCallbackAll(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    authCodeCallbackPOST(body: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthCodeCallback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthCodeCallbackPOST(_response);
        });
    }

    protected processAuthCodeCallbackPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    authCodeCallbackGET(id: number): Promise<string> {
        let url_ = this.baseUrl + "/api/AuthCodeCallback/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthCodeCallbackGET(_response);
        });
    }

    protected processAuthCodeCallbackGET(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    authCodeCallbackPUT(id: number, body: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthCodeCallback/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthCodeCallbackPUT(_response);
        });
    }

    protected processAuthCodeCallbackPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    authCodeCallbackDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthCodeCallback/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAuthCodeCallbackDELETE(_response);
        });
    }

    protected processAuthCodeCallbackDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param email (optional) 
     * @param name (optional) 
     * @param surname (optional) 
     * @param passwordHash (optional) 
     * @param accessToken (optional) 
     * @param refreshToken (optional) 
     * @param refreshTokenCreated (optional) 
     * @return OK
     */
    signup(id: number | undefined, email: string | undefined, name: string | undefined, surname: string | undefined, passwordHash: string | undefined, accessToken: string | undefined, refreshToken: string | undefined, refreshTokenCreated: Date | undefined): Promise<void> {
        let url_ = this.baseUrl + "/signup?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (surname === null)
            throw new Error("The parameter 'surname' cannot be null.");
        else if (surname !== undefined)
            url_ += "Surname=" + encodeURIComponent("" + surname) + "&";
        if (passwordHash === null)
            throw new Error("The parameter 'passwordHash' cannot be null.");
        else if (passwordHash !== undefined)
            url_ += "PasswordHash=" + encodeURIComponent("" + passwordHash) + "&";
        if (accessToken === null)
            throw new Error("The parameter 'accessToken' cannot be null.");
        else if (accessToken !== undefined)
            url_ += "AccessToken=" + encodeURIComponent("" + accessToken) + "&";
        if (refreshToken === null)
            throw new Error("The parameter 'refreshToken' cannot be null.");
        else if (refreshToken !== undefined)
            url_ += "RefreshToken=" + encodeURIComponent("" + refreshToken) + "&";
        if (refreshTokenCreated === null)
            throw new Error("The parameter 'refreshTokenCreated' cannot be null.");
        else if (refreshTokenCreated !== undefined)
            url_ += "RefreshTokenCreated=" + encodeURIComponent(refreshTokenCreated ? "" + refreshTokenCreated.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignup(_response);
        });
    }

    protected processSignup(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @param email (optional) 
     * @param password (optional) 
     * @return OK
     */
    login(name: string | undefined, email: string | undefined, password: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/login?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class Activity implements IActivity {
    pace?: string | undefined;
    resource_state?: number;
    athlete?: Athlete;
    name?: string | undefined;
    distance?: number;
    moving_time?: number;
    elapsed_time?: number;
    total_elevation_gain?: number;
    type?: string | undefined;
    sport_type?: string | undefined;
    workout_type?: number | undefined;
    id?: number;
    start_date?: Date;
    start_date_local?: Date;
    timezone?: string | undefined;
    utc_offset?: number;
    location_city?: string | undefined;
    location_state?: string | undefined;
    location_country?: string | undefined;
    achievement_count?: number;
    kudos_count?: number;
    comment_count?: number;
    athlete_count?: number;
    photo_count?: number;
    map?: Map;
    trainer?: boolean;
    commute?: boolean;
    manual?: boolean;
    private?: boolean;
    visibility?: string | undefined;
    flagged?: boolean;
    gear_id?: string | undefined;
    start_latlng?: number[] | undefined;
    end_latlng?: number[] | undefined;
    average_speed?: number;
    max_speed?: number;
    has_heartrate?: boolean;
    heartrate_opt_out?: boolean;
    display_hide_heartrate_option?: boolean;
    upload_id?: number | undefined;
    external_id?: string | undefined;
    from_accepted_tag?: boolean;
    pr_count?: number;
    total_photo_count?: number;
    has_kudoed?: boolean;
    average_watts?: number | undefined;
    kilojoules?: number | undefined;
    device_watts?: boolean | undefined;
    average_heartrate?: number | undefined;
    max_heartrate?: number | undefined;
    elev_high?: number | undefined;
    elev_low?: number | undefined;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pace = _data["pace"];
            this.resource_state = _data["resource_state"];
            this.athlete = _data["athlete"] ? Athlete.fromJS(_data["athlete"]) : <any>undefined;
            this.name = _data["name"];
            this.distance = _data["distance"];
            this.moving_time = _data["moving_time"];
            this.elapsed_time = _data["elapsed_time"];
            this.total_elevation_gain = _data["total_elevation_gain"];
            this.type = _data["type"];
            this.sport_type = _data["sport_type"];
            this.workout_type = _data["workout_type"];
            this.id = _data["id"];
            this.start_date = _data["start_date"] ? new Date(_data["start_date"].toString()) : <any>undefined;
            this.start_date_local = _data["start_date_local"] ? new Date(_data["start_date_local"].toString()) : <any>undefined;
            this.timezone = _data["timezone"];
            this.utc_offset = _data["utc_offset"];
            this.location_city = _data["location_city"];
            this.location_state = _data["location_state"];
            this.location_country = _data["location_country"];
            this.achievement_count = _data["achievement_count"];
            this.kudos_count = _data["kudos_count"];
            this.comment_count = _data["comment_count"];
            this.athlete_count = _data["athlete_count"];
            this.photo_count = _data["photo_count"];
            this.map = _data["map"] ? Map.fromJS(_data["map"]) : <any>undefined;
            this.trainer = _data["trainer"];
            this.commute = _data["commute"];
            this.manual = _data["manual"];
            this.private = _data["private"];
            this.visibility = _data["visibility"];
            this.flagged = _data["flagged"];
            this.gear_id = _data["gear_id"];
            if (Array.isArray(_data["start_latlng"])) {
                this.start_latlng = [] as any;
                for (let item of _data["start_latlng"])
                    this.start_latlng!.push(item);
            }
            if (Array.isArray(_data["end_latlng"])) {
                this.end_latlng = [] as any;
                for (let item of _data["end_latlng"])
                    this.end_latlng!.push(item);
            }
            this.average_speed = _data["average_speed"];
            this.max_speed = _data["max_speed"];
            this.has_heartrate = _data["has_heartrate"];
            this.heartrate_opt_out = _data["heartrate_opt_out"];
            this.display_hide_heartrate_option = _data["display_hide_heartrate_option"];
            this.upload_id = _data["upload_id"];
            this.external_id = _data["external_id"];
            this.from_accepted_tag = _data["from_accepted_tag"];
            this.pr_count = _data["pr_count"];
            this.total_photo_count = _data["total_photo_count"];
            this.has_kudoed = _data["has_kudoed"];
            this.average_watts = _data["average_watts"];
            this.kilojoules = _data["kilojoules"];
            this.device_watts = _data["device_watts"];
            this.average_heartrate = _data["average_heartrate"];
            this.max_heartrate = _data["max_heartrate"];
            this.elev_high = _data["elev_high"];
            this.elev_low = _data["elev_low"];
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pace"] = this.pace;
        data["resource_state"] = this.resource_state;
        data["athlete"] = this.athlete ? this.athlete.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["distance"] = this.distance;
        data["moving_time"] = this.moving_time;
        data["elapsed_time"] = this.elapsed_time;
        data["total_elevation_gain"] = this.total_elevation_gain;
        data["type"] = this.type;
        data["sport_type"] = this.sport_type;
        data["workout_type"] = this.workout_type;
        data["id"] = this.id;
        data["start_date"] = this.start_date ? this.start_date.toISOString() : <any>undefined;
        data["start_date_local"] = this.start_date_local ? this.start_date_local.toISOString() : <any>undefined;
        data["timezone"] = this.timezone;
        data["utc_offset"] = this.utc_offset;
        data["location_city"] = this.location_city;
        data["location_state"] = this.location_state;
        data["location_country"] = this.location_country;
        data["achievement_count"] = this.achievement_count;
        data["kudos_count"] = this.kudos_count;
        data["comment_count"] = this.comment_count;
        data["athlete_count"] = this.athlete_count;
        data["photo_count"] = this.photo_count;
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["trainer"] = this.trainer;
        data["commute"] = this.commute;
        data["manual"] = this.manual;
        data["private"] = this.private;
        data["visibility"] = this.visibility;
        data["flagged"] = this.flagged;
        data["gear_id"] = this.gear_id;
        if (Array.isArray(this.start_latlng)) {
            data["start_latlng"] = [];
            for (let item of this.start_latlng)
                data["start_latlng"].push(item);
        }
        if (Array.isArray(this.end_latlng)) {
            data["end_latlng"] = [];
            for (let item of this.end_latlng)
                data["end_latlng"].push(item);
        }
        data["average_speed"] = this.average_speed;
        data["max_speed"] = this.max_speed;
        data["has_heartrate"] = this.has_heartrate;
        data["heartrate_opt_out"] = this.heartrate_opt_out;
        data["display_hide_heartrate_option"] = this.display_hide_heartrate_option;
        data["upload_id"] = this.upload_id;
        data["external_id"] = this.external_id;
        data["from_accepted_tag"] = this.from_accepted_tag;
        data["pr_count"] = this.pr_count;
        data["total_photo_count"] = this.total_photo_count;
        data["has_kudoed"] = this.has_kudoed;
        data["average_watts"] = this.average_watts;
        data["kilojoules"] = this.kilojoules;
        data["device_watts"] = this.device_watts;
        data["average_heartrate"] = this.average_heartrate;
        data["max_heartrate"] = this.max_heartrate;
        data["elev_high"] = this.elev_high;
        data["elev_low"] = this.elev_low;
        return data;
    }
}

export interface IActivity {
    pace?: string | undefined;
    resource_state?: number;
    athlete?: Athlete;
    name?: string | undefined;
    distance?: number;
    moving_time?: number;
    elapsed_time?: number;
    total_elevation_gain?: number;
    type?: string | undefined;
    sport_type?: string | undefined;
    workout_type?: number | undefined;
    id?: number;
    start_date?: Date;
    start_date_local?: Date;
    timezone?: string | undefined;
    utc_offset?: number;
    location_city?: string | undefined;
    location_state?: string | undefined;
    location_country?: string | undefined;
    achievement_count?: number;
    kudos_count?: number;
    comment_count?: number;
    athlete_count?: number;
    photo_count?: number;
    map?: Map;
    trainer?: boolean;
    commute?: boolean;
    manual?: boolean;
    private?: boolean;
    visibility?: string | undefined;
    flagged?: boolean;
    gear_id?: string | undefined;
    start_latlng?: number[] | undefined;
    end_latlng?: number[] | undefined;
    average_speed?: number;
    max_speed?: number;
    has_heartrate?: boolean;
    heartrate_opt_out?: boolean;
    display_hide_heartrate_option?: boolean;
    upload_id?: number | undefined;
    external_id?: string | undefined;
    from_accepted_tag?: boolean;
    pr_count?: number;
    total_photo_count?: number;
    has_kudoed?: boolean;
    average_watts?: number | undefined;
    kilojoules?: number | undefined;
    device_watts?: boolean | undefined;
    average_heartrate?: number | undefined;
    max_heartrate?: number | undefined;
    elev_high?: number | undefined;
    elev_low?: number | undefined;
}

export class Athlete implements IAthlete {
    id?: number;
    email?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    passwordHash?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    refreshTokenCreated?: Date;

    constructor(data?: IAthlete) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.passwordHash = _data["passwordHash"];
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
            this.refreshTokenCreated = _data["refreshTokenCreated"] ? new Date(_data["refreshTokenCreated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Athlete {
        data = typeof data === 'object' ? data : {};
        let result = new Athlete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["passwordHash"] = this.passwordHash;
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["refreshTokenCreated"] = this.refreshTokenCreated ? this.refreshTokenCreated.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAthlete {
    id?: number;
    email?: string | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    passwordHash?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    refreshTokenCreated?: Date;
}

export class Map implements IMap {
    id?: number;
    summary_polyline?: string | undefined;
    resource_state?: number;

    constructor(data?: IMap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.summary_polyline = _data["summary_polyline"];
            this.resource_state = _data["resource_state"];
        }
    }

    static fromJS(data: any): Map {
        data = typeof data === 'object' ? data : {};
        let result = new Map();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["summary_polyline"] = this.summary_polyline;
        data["resource_state"] = this.resource_state;
        return data;
    }
}

export interface IMap {
    id?: number;
    summary_polyline?: string | undefined;
    resource_state?: number;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}